"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[8492],{3905:function(e,r,n){n.d(r,{Zo:function(){return p},kt:function(){return g}});var t=n(7294);function o(e,r,n){return r in e?Object.defineProperty(e,r,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[r]=n,e}function i(e,r){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);r&&(t=t.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),n.push.apply(n,t)}return n}function a(e){for(var r=1;r<arguments.length;r++){var n=null!=arguments[r]?arguments[r]:{};r%2?i(Object(n),!0).forEach((function(r){o(e,r,n[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(n,r))}))}return e}function c(e,r){if(null==e)return{};var n,t,o=function(e,r){if(null==e)return{};var n,t,o={},i=Object.keys(e);for(t=0;t<i.length;t++)n=i[t],r.indexOf(n)>=0||(o[n]=e[n]);return o}(e,r);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(t=0;t<i.length;t++)n=i[t],r.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=t.createContext({}),u=function(e){var r=t.useContext(l),n=r;return e&&(n="function"==typeof e?e(r):a(a({},r),e)),n},p=function(e){var r=u(e.components);return t.createElement(l.Provider,{value:r},e.children)},d={inlineCode:"code",wrapper:function(e){var r=e.children;return t.createElement(t.Fragment,{},r)}},s=t.forwardRef((function(e,r){var n=e.components,o=e.mdxType,i=e.originalType,l=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),s=u(n),g=o,m=s["".concat(l,".").concat(g)]||s[g]||d[g]||i;return n?t.createElement(m,a(a({ref:r},p),{},{components:n})):t.createElement(m,a({ref:r},p))}));function g(e,r){var n=arguments,o=r&&r.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=s;var c={};for(var l in r)hasOwnProperty.call(r,l)&&(c[l]=r[l]);c.originalType=e,c.mdxType="string"==typeof e?e:o,a[1]=c;for(var u=2;u<i;u++)a[u]=n[u];return t.createElement.apply(null,a)}return t.createElement.apply(null,n)}s.displayName="MDXCreateElement"},6659:function(e,r,n){n.r(r),n.d(r,{assets:function(){return l},contentTitle:function(){return a},default:function(){return d},frontMatter:function(){return i},metadata:function(){return c},toc:function(){return u}});var t=n(3117),o=(n(7294),n(3905));const i={id:"recovery",title:"Recovery",keywords:["Go","Kratos","Toolkit","Framework","Microservices","Protobuf","gRPC","HTTP"]},a=void 0,c={unversionedId:"component/middleware/recovery",id:"component/middleware/recovery",title:"Recovery",description:"Recovery middleware is used for abnormal recovery and prevents the program from exiting directly in the event of an exception to the service.",source:"@site/i18n/en/docusaurus-plugin-content-docs/current/component/middleware/07-recovery.md",sourceDirName:"component/middleware",slug:"/component/middleware/recovery",permalink:"/en/docs/component/middleware/recovery",draft:!1,editUrl:"https://github.com/go-kratos/go-kratos.dev/edit/main/i18n/en/docusaurus-plugin-content-docs/current/component/middleware/07-recovery.md",tags:[],version:"current",sidebarPosition:7,frontMatter:{id:"recovery",title:"Recovery",keywords:["Go","Kratos","Toolkit","Framework","Microservices","Protobuf","gRPC","HTTP"]},sidebar:"docs",previous:{title:"Rate Limiter",permalink:"/en/docs/component/middleware/ratelimit"},next:{title:"Tracing",permalink:"/en/docs/component/middleware/tracing"}},l={},u=[{value:"configuration",id:"configuration",level:3},{value:"<code>WithHandler()</code>",id:"withhandler",level:4},{value:"<code>WithLogger()</code>",id:"withlogger",level:4},{value:"Usage",id:"usage",level:3},{value:"HTTP",id:"http",level:4},{value:"gRPC",id:"grpc",level:4}],p={toc:u};function d(e){let{components:r,...n}=e;return(0,o.kt)("wrapper",(0,t.Z)({},p,n,{components:r,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Recovery middleware is used for abnormal recovery and prevents the program from exiting directly in the event of an exception to the service."),(0,o.kt)("h3",{id:"configuration"},"configuration"),(0,o.kt)("p",null,"Two configuration methods are available in recovery middleware ",(0,o.kt)("inlineCode",{parentName:"p"},"WithHandler()")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"WithLogger()"),"\u3002"),(0,o.kt)("h4",{id:"withhandler"},(0,o.kt)("inlineCode",{parentName:"h4"},"WithHandler()")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func WithHandler(h HandlerFunc) Option {\n    return func(o *options) {\n        o.handler = h\n    }\n}\n")),(0,o.kt)("p",null,"When you set up a service exception, you can use a custom ",(0,o.kt)("inlineCode",{parentName:"p"},"handler")," for handler processing, such as posting exception information to sentry."),(0,o.kt)("h4",{id:"withlogger"},(0,o.kt)("inlineCode",{parentName:"h4"},"WithLogger()")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func WithLogger(logger log.Logger) Option {\n    return func(o *options) {\n        o.logger = logger\n    }\n}\n")),(0,o.kt)("p",null,"To set up the ",(0,o.kt)("inlineCode",{parentName:"p"},"logger")," for logging."),(0,o.kt)("h3",{id:"usage"},"Usage"),(0,o.kt)("h4",{id:"http"},"HTTP"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var opts = []http.ServerOption{\n    http.Middleware(\n        recovery.Recovery(\n      recovery.WithLogger(log.DefaultLogger),\n            recovery.WithHandler(func(ctx context.Context, req, err interface{}) error {\n                    // do someting\n                    return nil\n            }),\n    ),\n    ),\n}\nsrv := http.NewServer(opts...)\n")),(0,o.kt)("h4",{id:"grpc"},"gRPC"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"var opts = []grpc.ServerOption{\n    grpc.Middleware(\n        recovery.Recovery(\n            recovery.WithLogger(log.DefaultLogger),\n            recovery.WithHandler(func(ctx context.Context, req, err interface{}) error {\n                // do someting\n                return nil\n            }),\n        ),\n    ),\n}\nsrv := grpc.NewServer(opts...)\n")))}d.isMDXComponent=!0}}]);